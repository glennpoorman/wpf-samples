<Window x:Class="ICommands.EditDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ICommands"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        Title="Edit Scout" Height="240" Width="325" ResizeMode="NoResize"
        WindowStartupLocation="CenterOwner" ShowInTaskbar="False"
        FocusManager.FocusedElement="{Binding ElementName=nameBox}">

    <!-- NOTE: Like the main window, we are no longer setting a data context here but instead will
               set this window itself as its own data context in the code-behind. We'll do this so
               that we can bind to the commands exposed in this window class. -->

    <!-- Create a resource section for the window. -->

    <Window.Resources>

        <!-- Create the object data provider to bind to the combo box items source. -->

        <ObjectDataProvider x:Key="gradeLevelValues" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:GradeLevel"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
    </Window.Resources>

    <!-- Begin definition of the main stack panel for the window. -->

    <StackPanel>

        <!-- Place a stack panel to show the scout name.

             Note the change in the binding. Instead of binding this window to the copy of the scout
             we want to edit, we will be binding the window to itself. Since we're no longer binding
             directly to a scout, we can't bind to properties like "Name" or "Sold" as those are not
             properties exposed by the window. Now, we could go ahead and expose them via properties
             on the window. Another alternative though is to reference the public "ScoutProxy"
             property and bind to "Name" and "Sold" throught that property. We do that below using
             the syntax "{Binding ScoutProxy.Name}". -->

        <StackPanel Margin="8,8,0,0">
            <TextBlock Text="Scout Name"/>
            <TextBox Name="nameBox" Text="{Binding Path=ScoutProxy.Name, UpdateSourceTrigger=PropertyChanged}"/>
        </StackPanel>

        <!-- Place another stack panel to show how many cookie boxes the scout has sold.

             Again note that in the binding we reference the "Sold" property via the exposed
             "ScoutProxy" property. -->

        <StackPanel Margin="8">
            <TextBlock Text="Boxes Sold"/>
            <TextBox Text="{Binding Path=ScoutProxy.Sold, UpdateSourceTrigger=PropertyChanged}"/>
        </StackPanel>

        <!-- Place a group box for the scout grade levels. -->

        <GroupBox Header="Grade Level" Margin="8" Padding="4">
            <ComboBox ItemsSource="{Binding Source={StaticResource gradeLevelValues}}"
                          SelectedItem="{Binding ScoutProxy.GradeLevel}"/>
        </GroupBox>

        <!-- Place one more stack panel to hold the side by side "Ok" and "Cancel" buttons.

             Note that like in the main window we no longer use a static resource to set the
             "Command" property but instead we bind it to the exposed "Ok" property (which
             implements "ICommand") on the window. -->

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,8,0,0">
            <Button Margin="0,0,4,0" Width="108" IsDefault="True" Content="Ok"
                    Command="{Binding Ok}"/>
            <Button Margin="4,0,0,0" Width="108" IsCancel="True" Content="Cancel"/>
        </StackPanel>
    </StackPanel>
</Window>

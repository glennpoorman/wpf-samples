<!-- Instead of a window, here we create a user control. A user control is a custom control. Here
     we are defining our own control designed to operate on a scout object. We'll then drop this
     control using just one line into a container object such as a WPF window.
    
     Note that a user controls final dimensions will be controlled by the container so give it a
     width and height doesn't make much sense. We do need a width and height in order to accurately
     design the control in the XAML editor though so for that reason we use the "d:DesignHeight"
     and "d:DesignWidth" properties here. -->

<UserControl x:Class="MVVM.Views.ScoutsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:utilities="clr-namespace:MVVM.Utilities"
             xmlns:viewmodels="clr-namespace:MVVM.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="310" d:DesignWidth="400">

    <!-- Create a resource section for the control. -->

    <UserControl.Resources>

        <!-- Create the converter we need to convert between grade level and color. -->

        <utilities:LevelToColorConverter x:Key="levelToColorConverter"/>

        <!-- Create a styole for a "ListViewItem". -->

        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="Foreground" Value="{Binding Path=GradeLevel,
                    Converter={StaticResource levelToColorConverter}}"/>
        </Style>

        <!-- Create a style for images to decrease the opacity when they are disabled. -->

        <Style TargetType="{x:Type Image}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    
    <!-- Create an instance of the "ScoutsViewModel" class to be the data context on the view. -->

    <UserControl.DataContext>
        <viewmodels:ScoutsViewModel/>
    </UserControl.DataContext>

    <!-- Begin definition of the main dock panel element. -->

    <DockPanel>

        <!-- Start the menu definition docking the menu to the top of the dock panel and add the
             menu items.

             The command properties on the menu items are now bound to command properties on the new
             view model. -->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="E_xit" Command="{Binding Exit}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Add Scout" Command="{Binding AddScout}"/>
                <MenuItem Header="_Edit Scout" Command="{Binding EditScout}"/>
                <MenuItem Header="_Delete Scout" Command="{Binding DeleteScout}"/>
                <Separator/>
                <MenuItem Header="Add _Sale" Command="{Binding AddSale}"/>
                <MenuItem Header="Sub_tract Sale" Command="{Binding SubtractSale}"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About..." Command="{Binding About}"/>
            </MenuItem>
        </Menu>

        <!-- Place a toolbar for our commands right under the menu.

             The command properties on the toolbar items are bound to command properties on the new
             view model. -->

        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Button ToolTip="Add Scout" Command="{Binding AddScout}">
                    <Image Source="../Resources/new-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Edit Scout" Command="{Binding EditScout}">
                    <Image Source="../Resources/edit-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Delete Scout" Command="{Binding DeleteScout}">
                    <Image Source="../Resources/delete-icon-32x32.png"/>
                </Button>
                <Separator/>
                <Button ToolTip="Add Sale" Command="{Binding AddSale}">
                    <Image Source="../Resources/add-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Subtract Sale" Command="{Binding SubtractSale}">
                    <Image Source="../Resources/subtract-icon-32x32.png"/>
                </Button>
                <Separator/>
                <Button ToolTip="About" Command="{Binding About}">
                    <Image Source="../Resources/help-icon-32x32.png"/>
                </Button>
            </ToolBar>
        </ToolBarTray>

        <!-- Place a text block containing a brief description of the app. -->

        <TextBlock Text="Cookie Sales" FontWeight="Bold" FontStyle="Italic" DockPanel.Dock="Top"
                   Margin="6,6,0,0"/>

        <!-- Place a list view to hold the list of participating scouts.

             The items source is bound to the "Scouts" property on the new view model. -->

        <ListView Margin="6" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding Scouts}"
                  SelectedItem="{Binding Path=SelectedItem, Mode=OneWayToSource}"
                  MouseDoubleClick="ListDoubleClick">
            <ListView.View>
                <GridView>
                    <GridViewColumn DisplayMemberBinding="{Binding Name}" Header="Name" Width="200"/>
                    <GridViewColumn DisplayMemberBinding="{Binding Sold}" Header="Boxes Sold" Width="80"/>
                    <GridViewColumn DisplayMemberBinding="{Binding GradeLevel}" Header="Level" Width="80"/>
                </GridView>
            </ListView.View>
        </ListView>
    </DockPanel>
</UserControl>

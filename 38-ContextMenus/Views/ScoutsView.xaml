<UserControl x:Class="ContextMenus.Views.ScoutsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:utilities="clr-namespace:ContextMenus.Utilities"
             xmlns:viewmodels="clr-namespace:ContextMenus.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="310" d:DesignWidth="400">

    <!-- Create a resource section for the control. -->

    <UserControl.Resources>

        <!-- Create the converter we need to convert between grade level and color. -->

        <utilities:LevelToColorConverter x:Key="levelToColorConverter"/>

        <!-- Create a context menu resource. There are several XAML elements that allow for the
             addition of a context menu. For many of these items, you can go ahead and defined the
             context menu right in the definition of the item itself like in the following example
             putting a context menu on a text box.
        
                 <TextBox Text="{Binding MyString}">
                     <TextBox.ContextMenu>
                         <ContextMenu>
                             ...
                         </ContextMenu>
                     </TextBox.ContextMenu>
                 </TextBox>
        
             Like with most other resources, you also have the option of creating the context menu
             as a resource and then referring to it by name.
        
                 <ContextMenu x:Key="myCtxMenu">
                     ...
                 </ContextMenu>
        
                     :
        
                 <TextBox Text="{Binding MyString}" ContextMenu="{StaticResource myCtxMenu"}/>
        
             In our case we have no other choice but to define the menu as a resource because we
             are putting the menu on a list box item. We don't define list box items explicitly so
             in order to customize these items, we need to do it via static resources and styles.
        
             The context menu itself essentially looks just like the definition for our main window
             menu. Notice the difference in the binding though.
        
                 Command="{Binding DataContext.EditScout,
                           RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"
        
             Here we tell the binding to first locate the most recent item in the element tree that
             is of type "ListView" and then bind to "DataContext.EditScout". Honestly it's not clear
             to me why we have to do this but simply binding to "EditScout" didn't work and after
             some extensive searching via Google, this was the solution I found. -->

        <ContextMenu x:Key="listContextMenu">
            <MenuItem Header="_Edit" Command="{Binding DataContext.EditScout,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
            <MenuItem Header="_Delete" Command="{Binding DataContext.DeleteScout,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
            <Separator/>
            <MenuItem Header="Add _Sale" Command="{Binding DataContext.AddSale,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
            <MenuItem Header="Sub_tract Sale" Command="{Binding DataContext.SubtractSale,
                RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListView}}"/>
        </ContextMenu>

        <!-- Create a style for a "ListViewItem".
        
             In addition to the "Foreground" property, note that we are also setting the
             "ContextMenu" property and using the menu we just created. -->

        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="Foreground" Value="{Binding Path=GradeLevel,
                    Converter={StaticResource levelToColorConverter}}"/>
            <Setter Property="ContextMenu" Value="{StaticResource listContextMenu}"/>
        </Style>

        <!-- Create a style for images to decrease the opacity when they are disabled. -->

        <Style TargetType="{x:Type Image}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    
    <!-- Create an instance of the "ScoutsViewModel" class to be the data context on the view. -->

    <UserControl.DataContext>
        <viewmodels:ScoutsViewModel/>
    </UserControl.DataContext>

    <!-- Begin definition of the main dock panel element. -->

    <DockPanel>

        <!-- Start the menu definition docking the menu to the top of the dock panel and add the
             menu items. -->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="E_xit" Command="{Binding Exit}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Add Scout" Command="{Binding AddScout}"/>
                <MenuItem Header="_Edit Scout" Command="{Binding EditScout}"/>
                <MenuItem Header="_Delete Scout" Command="{Binding DeleteScout}"/>
                <Separator/>
                <MenuItem Header="Add _Sale" Command="{Binding AddSale}"/>
                <MenuItem Header="Sub_tract Sale" Command="{Binding SubtractSale}"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About..." Command="{Binding About}"/>
            </MenuItem>
        </Menu>

        <!-- Place a toolbar for our commands right under the menu. -->

        <ToolBarTray DockPanel.Dock="Top">
            <ToolBar>
                <Button ToolTip="Add Scout" Command="{Binding AddScout}">
                    <Image Source="../Resources/new-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Edit Scout" Command="{Binding EditScout}">
                    <Image Source="../Resources/edit-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Delete Scout" Command="{Binding DeleteScout}">
                    <Image Source="../Resources/delete-icon-32x32.png"/>
                </Button>
                <Separator/>
                <Button ToolTip="Add Sale" Command="{Binding AddSale}">
                    <Image Source="../Resources/add-icon-32x32.png"/>
                </Button>
                <Button ToolTip="Subtract Sale" Command="{Binding SubtractSale}">
                    <Image Source="../Resources/subtract-icon-32x32.png"/>
                </Button>
                <Separator/>
                <Button ToolTip="About" Command="{Binding About}">
                    <Image Source="../Resources/help-icon-32x32.png"/>
                </Button>
            </ToolBar>
        </ToolBarTray>

        <!-- Place a text block containing a brief description of the app. -->

        <TextBlock Text="Cookie Sales" FontWeight="Bold" FontStyle="Italic" DockPanel.Dock="Top"
                   Margin="6,6,0,0"/>

        <!-- Place a list view to hold the list of participating scouts.

             The items source is bound to the "Scouts" property on the new view model. -->

        <ListView Margin="6" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding Scouts}"
                  SelectedItem="{Binding Path=SelectedItem, Mode=OneWayToSource}"
                  MouseDoubleClick="ListDoubleClick">
            <ListView.View>
                <GridView>
                    <GridViewColumn DisplayMemberBinding="{Binding Name}" Header="Name" Width="200"/>
                    <GridViewColumn DisplayMemberBinding="{Binding Sold}" Header="Boxes Sold" Width="80"/>
                    <GridViewColumn DisplayMemberBinding="{Binding GradeLevel}" Header="Level" Width="80"/>
                </GridView>
            </ListView.View>
        </ListView>
    </DockPanel>
</UserControl>

<!-- Main window XAML definition.

     The "x:Class" property specifies the CLR namespace and class (defined in MainWindow.xaml.cs)
     that will contain the "code-behind" for the window. The term "code-behind" describes the code
     (written in a .NET language like C#) that is written to support the item defined in this XAML
     page.

     The "xmlns" property defines an XML namespace (hence "xmlns"). An XML namespace is used to
     resolve XML element and property names. At a minimum, a XAML file needs to define two of
     these namespaces.

         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"

     An "xmlns" spec by itself defines the default namespace. This is where the XAML processor
     will look for non-qualified element and/or property names. In this case, we specify the
     location where the bulk of the WPF elements are defined.

     An "xmlns" spec can also be qualified.

         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

     Here we specify a namespace to look at for elements or properties that are qualified with
     an "x". As an example, take a look at the very first line of xaml code.

         <Window x:Class="XAMLWindow.MainWindow" ...

     When processing this line, the XAML processor will look for the definition of "Window" in
     the namespace defined by the "xmlns" property. Since the "Class" property was qualified with
     "x:", the XAML processor will look for the definition of that property in the namespace
     defined by the property "xmlns:x".

     You can also add additional "xmlns" specs to point to your own namespaces or namespaces in
     other assemblies. We'll see how to do this later.

     Lastly, the "Title", "Width" and "Height" properties are window specific properties that
     specify the title bar string and the initial width and height of the window. -->

<Window x:Class="XAMLWindow.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XAMLWindow" Width="525" Height="350">

    <!-- Place a 200x25 button within the window.

         This is exactly equivalent to the button we created in the "CustomWindow" sample. Just as
         before, with no size information WPF will size the button to fill the window. By setting
         an explicit width and height (using the "Width" and "Height" properties), we fix the size
         while WPF keeps the button in the center of the window even as the window is resized.

         Like the button in the "CustomWindow" sample, we use the "Content" property to set the
         button text and the "Click" property to specify the event handler to be called when the
         button is clicked. A build error will occur if an event handler with that name is not
         implemented in the code-behind for the window. -->

    <Button Width="200" Height="25" Content="Close" Click="ButtonClick"/>

    <!-- Note that XAML provides more than one way to specify most properties on an element. For
         example, the content of the button could have been placed between an opening and closing
         "Button" element as in the following:

             <Button Width="200" Height="25" Click="ButtonClick">Close</Button>

         Also note that properties can be specified as additional elements between the opening and
         closing tags of a containing element. For example, another way to write the same button
         would be to explicitly specify a Button.Content element in between opening and closing
         button tags.

             <Button Width="200" Height="25" Click="ButtonClick">
                 <Button.Content>Close</Button.Content>
             </Button>

         The added content element in this case is redundant but can sometimes help to clarify the
         code if multiple property elements are specified this way as in the following.

             <Button Click="ButtonClick">
                 <Button.Content>Close</Button.Content>
                 <Button.Width>200</Button.Width>
                 <Button.Height>25</Button.Height>
             </Button>

         The different syntax comes in handy when we specify content that is more complex than a
         simple text string. -->

</Window>

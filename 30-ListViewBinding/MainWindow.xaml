<Window x:Class="ListViewBinding.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ListViewBinding"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        Title="ListViewBinding" Height="510" Width="410" ResizeMode="NoResize">

    <!-- Create a resource section for the window. -->

    <Window.Resources>

        <!-- Create the object data provider to bind to the combo box items source. -->

        <ObjectDataProvider x:Key="gradeLevelValues" ObjectType="{x:Type sys:Enum}" MethodName="GetValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="local:GradeLevel"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!-- Create the converter we need to convert between grade level and color. -->

        <local:LevelToColorConverter x:Key="levelToColorConverter"/>

        <!-- Create a styole for a "ListViewItem". The list view item is the type of object used to
             populate a list view. Here we set the foreground color using the same converter from
             the previous samples -->

        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="Foreground" Value="{Binding Path=GradeLevel,
                    Converter={StaticResource levelToColorConverter}}"/>
        </Style>
    </Window.Resources>

    <!-- Create an instance of the "Scouts" class and set it as the data context on the window. -->

    <Window.DataContext>
        <local:Scouts/>
    </Window.DataContext>

    <!-- Begin definition of the main dock panel element. -->

    <DockPanel>

        <!-- Start the menu definition docking the menu to the top of the dock panel and add the
             menu items. -->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="E_xit" Click="ExitClick"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Add Scout" Click="AddScoutClick"/>
                <MenuItem Header="_Delete Scout" Click="DeleteScoutClick" IsEnabled="{Binding Count}"/>
                <Separator/>
                <MenuItem Header="Add _Sale" Click="AddSaleClick" IsEnabled="{Binding Count}"/>
                <MenuItem Header="Sub_tract Sale" Click="SubtractSaleClick">
                    <MenuItem.IsEnabled>
                        <PriorityBinding>
                            <Binding Path="Sold"/>
                            <Binding Path="Count"/>
                        </PriorityBinding>
                    </MenuItem.IsEnabled>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>

        <!-- Begin definition of the main stack panel container. -->

        <StackPanel DockPanel.Dock="Top" Margin="6">

            <!-- Place a text block containing a brief description of the app. -->

            <TextBlock Text="Cookie Sales" FontWeight="Bold" FontStyle="Italic"/>
            <Separator Margin="0,0,0,10"/>

            <!-- Place a stack panel to show the scout name. -->

            <StackPanel Margin="8,0">
                <TextBlock Text="Scout Name"/>
                <TextBox Text="{Binding Name}" IsEnabled="{Binding Count}"/>
            </StackPanel>

            <!-- Place another stack panel to show how many cookie boxes the scout has sold. -->

            <StackPanel Margin="8">
                <TextBlock Text="Boxes Sold"/>
                <StackPanel Orientation="Horizontal">
                    <TextBox Width="60" HorizontalAlignment="Left" Text="{Binding Sold}"
                             IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="+" Margin="6,0,0,0" Click="AddSaleClick"
                            IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="-" Margin="6,0,0,0" Click="SubtractSaleClick">
                        <Button.IsEnabled>
                            <PriorityBinding>
                                <Binding Path="Sold"/>
                                <Binding Path="Count"/>
                            </PriorityBinding>
                        </Button.IsEnabled>
                    </Button>
                </StackPanel>
            </StackPanel>

            <!-- Place a group box for the scout grade levels. -->

            <GroupBox Header="Grade Level" Margin="8" Padding="4">
                <ComboBox ItemsSource="{Binding Source={StaticResource gradeLevelValues}}"
                          SelectedItem="{Binding GradeLevel}" IsEnabled="{Binding Count}"/>
            </GroupBox>
        </StackPanel>

        <!-- Place a list view to hold the list of participating scouts.

             This element is very similar to a listbox with some notable exceptions.

             * The "ItemsSource" property is still bound to the data context and the property
               "IsSynchronizedWithCurrentItem" is still used to keep the element and data context
               in sync.

             * The list view requires a "GridView" to layout exactly how the items are displayed.
               Here we define three columns containing the header texts "Name", "Boxes Sold", and
               "Level".

             * Additionally, each column contains a "DisplayMemberBinding" property. This property
               specified which property on the data context to display in this column.

             Note that by substituting the listbox with a list view in the XAML and using the
             "DisplayMemberBinding", the sample works as intended without any changes to the code
             whatsoever. -->

        <ListView Margin="8" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding}">
            <ListView.View>
                <GridView>
                    <GridViewColumn DisplayMemberBinding="{Binding Name}" Header="Name" Width="200"/>
                    <GridViewColumn DisplayMemberBinding="{Binding Sold}" Header="Boxes Sold" Width="80"/>
                    <GridViewColumn DisplayMemberBinding="{Binding GradeLevel}" Header="Level" Width="80"/>
                </GridView>
            </ListView.View>
        </ListView>
    </DockPanel>
</Window>

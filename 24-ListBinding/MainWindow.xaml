<Window x:Class="ListBinding.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ListBinding"
        Title="ListBinding" Height="310" Width="325" ResizeMode="NoResize">

    <!-- Create an instance of the "Scouts" class and set it as the data context on the window.

         On the surface the behavior will be the same as any other data context you might set on
         a UI element. When an element is "bound" to a specific property, WPF will look for that
         property directly on the data context (the collection). What's different here is what will
         happen if that property is not found.

         If you look at the spec for the ListBox element (at the bottom of this XAML), you'll notice
         three things that are a bit different.

         1. The "ItemSource" property is set with the string "{Binding}" (just the word "Binding"
            with no additional information). That tells the list box to use the data context
            directly as it's source for content (as opposed to a property on the data context).

         2. The "IsSynchronizedWithCurrentItem" property synchronizes the binding with the currently
            selected list item (individual scout). Going back to what happens if we bind to a
            property that doesn't exist on the collection, WPF will then look to the currently
            selected item to see if the property exists there. Because of this behavior, our text
            boxes (which are unmodified from the previous sample) will continue
            to work.

            Note that if the collection contained the property "Sold" or "Name" then the text boxes
            would bind to those. That would likely not be the desired result so be careful there.

         3. The "DisplayMemberPath" property tells the list which property on an individual list
            item to display. By default, the list would call the "ToString" method on the item to
            determine what to put in the listbox. You could rely on this and simply implement
            "ToString" to return the string you want. But it is better to use this property to tell
            the list what to display. -->
    
    <Window.DataContext>
        <local:Scouts/>
    </Window.DataContext>

    <!-- Begin definition of a dock panel element. We'll use a dock panel to make sure that our
         menu stays docked to the top of the window. -->

    <DockPanel>

        <!-- Start the menu definition docking the menu to the top of the dock panel and add the
             menu items.

             Note the two new items "Add Scout" and "Delete Scout" for adding and removing
             individual scouts to/from the collection.

             Also note the use of the "Separator" item to add a separator between groups of menu
             items.

             Also note that the items "Delete Scout" and "Add Sale" are bound to the "Count"
             property on the collection. This will enable or disable these items based on whether
             there are any scouts in the collection.

             Lastly, note the specification for the "Subtract Sale" item. There is a lot going on
             here.

             * First, we've gone "long hand" for the "MenuItem" spec and also for the "IsEnabled"
               property spec. The syntax we are using for "IsEnabled" is something you can use for
               any property in XAML but is not required most of the time for singleton elements like
               this.

             * Within the "IsEnabled" spec, we introduce "PriorityBinding". This allows us to
               specify a collection of bindings. The binding that is ultimately used will be the
               first binding that successfully returns a result.

               Let's break it down using our app as the example:

               1. If there are no scouts in the list yet, binding to the property "Sold" will fail
                  because there is no "Sold" property on the collection and because the collection
                  contains no scouts. This will cause WPF to look to the next binding which is the
                  "Count" property. There is a "Count property on the collection so that property
                  will be used to enable/disable the item.

               2. If there are one or more scouts in the list, then the binding will go to the
                  currently selected scout and enable/disable the menu item based on the "Sold"
                  property. -->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="E_xit" Click="ExitClick"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Add Scout" Click="AddScoutClick"/>
                <MenuItem Header="_Delete Scout" Click="DeleteScoutClick" IsEnabled="{Binding Count}"/>
                <Separator/>
                <MenuItem Header="Add _Sale" Click="AddSaleClick" IsEnabled="{Binding Count}"/>
                <MenuItem Header="Sub_tract Sale" Click="SubtractSaleClick">
                    <MenuItem.IsEnabled>
                        <PriorityBinding>
                            <Binding Path="Sold"/>
                            <Binding Path="Count"/>
                        </PriorityBinding>
                    </MenuItem.IsEnabled>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>

        <!-- Begin definition of the main stack panel container. -->

        <StackPanel DockPanel.Dock="Top" Margin="6">

            <!-- Place a text block containing a brief description of the app. -->

            <TextBlock Text="Cookie Sales" FontWeight="Bold" FontStyle="Italic"/>
            <Separator Margin="0,0,0,10"/>

            <!-- Place a stack panel to show the scout name.

                 Note that we're also binding the "IsEnabled" property of the textbox to the "Count"
                 property of the collection so as not to allow editing of the textbox until there
                 is at least one scout in the collection. -->

            <StackPanel Margin="8,0">
                <TextBlock Text="Scout Name"/>
                <TextBox Text="{Binding Name}" IsEnabled="{Binding Count}"/>
            </StackPanel>

            <!-- Place another stack panel to show how many cookie boxes the scout has sold.
            
                 Again we bind the "IsEnabled" property of the textbox to the "Count" property of
                 the collection so as to disable editing until there is at least one scout in the
                 collection. -->

            <StackPanel Margin="8">
                <TextBlock Text="Boxes Sold"/>
                <StackPanel Orientation="Horizontal">
                    <TextBox Width="60" HorizontalAlignment="Left" Text="{Binding Sold}"
                             IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="+" Margin="6,0,0,0" Click="AddSaleClick"
                            IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="-" Margin="6,0,0,0" Click="SubtractSaleClick">
                        <Button.IsEnabled>
                            <PriorityBinding>
                                <Binding Path="Sold"/>
                                <Binding Path="Count"/>
                            </PriorityBinding>
                        </Button.IsEnabled>
                    </Button>
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!-- Place a listbox to hold the list of participating scouts. Refer back to the discussion
             at the top for the details as to how and why all of this works. -->

        <ListBox Margin="8" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding}"
                 DisplayMemberPath="Name"/>
    </DockPanel>
</Window>

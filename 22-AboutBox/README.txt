AboutBox

This sample demonstrates adding an "About" dialog box to an application. This application brings up
a window with two buttons. One is an "About" button that brings up an "About" dialog box and the
other is the "Close" button. The "About" dialog box contains pertinent information about the
executing assembly.

What's Different
----------------

* We introduced an additional window definition (XAML and code-behind) to represent the "About"
  dialog box. WPF doesn't really distinguish between a window and a dialog so this is just another
  window definition. The window itself contains a dock panel with an image on the left and a stack
  panel of information on the right. The stack contains labels that are bound to properties that
  we'll define right in the code-behind for the window.

* The "About" window definition contains some new properties in the window spec. The
  "WindowStartupLocation property states that this window should be centered within its owning
  window. The "ShowInTaskbar" property specifies whether or not the window should appear in the
  taskbar when it comes to life. By default that property is true. Since Windows dialogs don't
  generally appear in the taskbar though, we set it to false.

* The "DataContext" property is set right in the window spec and we use the "RelativeSource"
  binding. This specifies the data context location relative to the target. In this case, we use
  "Self" which makes the window's code-behind and data context one in the same.

* To make the data binding work then, we go ahead and implement properties right in the "About"
  window code-behind to fetch the information we need from the assembly. This code was lifted right
  out of the code that is auto-generated by Visual Studio when you add an "About" dialog to a
  Windows Forms app.

* We used two new properties when placing the "Ok" button in the "About" window. The "IsDefault"
  property tells WPF where to put the focus when the window is shown. The "IsCancel" property tells
  WPF to close the window when this button is clicked and return false. The return value is
  important when you're working with a window that actually does something. This is generally
  applied to a "Cancel" button so it might look strange on an "Ok" button. For a simple "About"
  dialog though, "Ok" and "Cancel" are equivalent ("Close" would probably be more appropriate but
  "Ok" is the convention) and setting the "IsCancel" property to true relieves us from having to
  write anything in the code-behind to explicitly close the window.

* In the main window XAML, we place a new button right alongside the "Close" button labeled
  "About". Like the "Close" button, the content of the new button is a horizontally aligned stack
  panel containing an image and a text string.

* The main window code-behind contains an event handler for the "About" button click. The event
  handler uses "ShowDialog" to bring up the window passing the main window in as the owner. As I
  said before, WPF doesn't distinguish between a window and a dialog. Calling "ShowDialog" instead
  of "Show", however, brings up the window modally while "Show" brings it up modelessly.

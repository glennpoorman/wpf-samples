<Window x:Class="TypedDataTemplates.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:TypedDataTemplates"
        Title="TypedDataTemplates" Height="310" Width="325" ResizeMode="NoResize">

    <!-- Like the last sample, here we define data templates as window resources. Instead of
         assigning a key to the templates though, we specify the data type that the template
         applies to.

         If you look at the listbox spec at the bottom, you'll see that we no longer specify an
         item template. Under normal circumstances, this would revert back to simply calling
         "ToString" on the items in the listbox. Since we've added these typed data templates as
         window resources though, they will be used automatically if when objects are added to the
         list whose type matches that of the templates. Look at the comments below to break this
         down a bit further. -->

    <Window.Resources>

        <!-- Add a template for items of type "Brownie". Any time an object is added to the
             listbox now whose type is "Brownie", this is the data template that will be used.
             If you look closely, this data template is almost identical to the one from the
             previous sample except that we've changed the text color of the textbox. -->

        <DataTemplate DataType="{x:Type local:Brownie}">
            <TextBlock Foreground="Brown">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}{0} - {1}">
                        <Binding Path="Name"/>
                        <Binding Path="Sold"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>

        <!-- Now we add a template for items of type "Junior". Just like the other template, this
             one will apply to any items added to the list whose type is "Junior". The template
             itself is very close to the one for brownies except that the text color and the font
             style in the textbox is different. -->

        <DataTemplate DataType="{x:Type local:Junior}">
            <TextBlock Foreground="Purple" FontStyle="Italic">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}{0} - {1}">
                        <Binding Path="Name"/>
                        <Binding Path="Sold"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>
        
        <!-- Lastly we add the template for items of type "Senior". Again this is almost identical
             to the other templates except for the color and font style of the textbox. -->

        <DataTemplate DataType="{x:Type local:Senior}">
            <TextBlock Foreground="Orange" FontStyle="Oblique">
                <TextBlock.Text>
                    <MultiBinding StringFormat="{}{0} - {1}">
                        <Binding Path="Name"/>
                        <Binding Path="Sold"/>
                    </MultiBinding>
                </TextBlock.Text>
            </TextBlock>
        </DataTemplate>
    </Window.Resources>

    <!-- Create an instance of the "Scouts" class and set it as the data context on the window. -->

    <Window.DataContext>
        <local:Scouts/>
    </Window.DataContext>

    <!-- Begin definition of the main dock panel element. -->

    <DockPanel>

        <!-- Start the menu definition docking the menu to the top of the dock panel and add the
             menu items.
        
             Note that instead of "Add Scout", we now have "Add Brownie", "Add Junior", and "Add
             Senior" items. -->

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="E_xit" Click="ExitClick"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="Add _Brownie" Click="AddBrownieClick"/>
                <MenuItem Header="Add _Junior" Click="AddJuniorClick"/>
                <MenuItem Header="Add _Senior" Click="AddSeniorClick"/>
                <MenuItem Header="_Delete Scout" Click="DeleteScoutClick" IsEnabled="{Binding Count}"/>
                <Separator/>
                <MenuItem Header="_Add Sale" Click="AddSaleClick" IsEnabled="{Binding Count}"/>
                <MenuItem Header="Sub_tract Sale" Click="SubtractSaleClick">
                    <MenuItem.IsEnabled>
                        <PriorityBinding>
                            <Binding Path="Sold"/>
                            <Binding Path="Count"/>
                        </PriorityBinding>
                    </MenuItem.IsEnabled>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About..." Click="AboutClick"/>
            </MenuItem>
        </Menu>

        <!-- Begin definition of the main stack panel container. -->

        <StackPanel DockPanel.Dock="Top" Margin="6">

            <!-- Place a text block containing a brief description of the app. -->

            <TextBlock Text="Cookie Sales" FontWeight="Bold" FontStyle="Italic"/>
            <Separator Margin="0,0,0,10"/>

            <!-- Place a stack panel to show the scout name. -->

            <StackPanel Margin="8,0">
                <TextBlock Text="Scout Name"/>
                <TextBox Text="{Binding Name}" IsEnabled="{Binding Count}"/>
            </StackPanel>

            <!-- Place another stack panel to show how many cookie boxes the scout has sold. -->

            <StackPanel Margin="8">
                <TextBlock Text="Boxes Sold"/>
                <StackPanel Orientation="Horizontal">
                    <TextBox Width="60" HorizontalAlignment="Left" Text="{Binding Sold}"
                             IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="+" Margin="6,0,0,0" Click="AddSaleClick"
                            IsEnabled="{Binding Count}"/>
                    <Button Width="20" Content="-" Margin="6,0,0,0" Click="SubtractSaleClick">
                        <Button.IsEnabled>
                            <PriorityBinding>
                                <Binding Path="Sold"/>
                                <Binding Path="Count"/>
                            </PriorityBinding>
                        </Button.IsEnabled>
                    </Button>
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!-- Place a listbox to hold the list of participating scouts.

             Unlike the previous sample where we defined a data template right in the listbox spec,
             here we've already defined the data template as a static resource so we can simply
             reference that definition using the property "ItemTemplate" and the key name
             "listTemplate". -->
        
        <ListBox Margin="8" IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding}"/>
    </DockPanel>
</Window>

<UserControl x:Class="FileIcons.Views.FolderTreeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:viewmodels="clr-namespace:FileIcons.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="600">

    <!-- Create an instance of the folder tree view model to be the data context for the view. -->
    
    <UserControl.DataContext>
        <viewmodels:FolderTreeViewModel/>
    </UserControl.DataContext>

    <!-- Begin definition of the main dock panel element. -->

    <DockPanel>
        
        <!-- Place a text block containing a brief description of what to do. -->

        <TextBlock DockPanel.Dock="Top" Margin="8,8,0,0" FontWeight="Bold"
                   Text="Browse to a folder to display its contents in the tree"/>

        <!-- Create a dock panel to hold the "Browse" button (docked right) and a text block that
             will contain the currently selected path. -->

        <DockPanel DockPanel.Dock="Top" VerticalAlignment="Top" Margin="8">
            <Button DockPanel.Dock="Right" Height="24" Width="80" Margin="3,0,0,0" Content="Browse..."
                    Command="{Binding Browse}"/>
            <Border Margin="0,0,3,0" BorderThickness="1" BorderBrush="Gray">
                <TextBlock Padding="2" Text="{Binding CurrentPath}"/>
            </Border>
        </DockPanel>

        <!-- Create a stack panel docked at the bottom right to hole the "About" and "Close" buttons. -->

        <StackPanel DockPanel.Dock="Bottom" Orientation="Horizontal" HorizontalAlignment="Right"
                    VerticalAlignment="Bottom" Margin="8">
            <Button Height="24" Width="140" Margin="0,0,3,0" Command="{Binding About}" Content="About"/>
            <Button Height="24" Width="140" Margin="3,0,0,0" Command="{Binding Exit}" Content="Close"/>
        </StackPanel>

        <!-- Create a tree view to take up the rest of the space. -->

        <TreeView Margin="8,0" ItemsSource="{Binding Children}">

            <!-- Create a resources section just for this tree view. -->

            <TreeView.Resources>

                <!-- Define the data template for a single file.
                
                     Note that in this sample, we add a stack panel so that we can display the file
                     icon image along with the file name. -->

                <DataTemplate DataType="{x:Type viewmodels:FileViewModel}">
                    <StackPanel Orientation="Horizontal" Margin="2">
                        <Image Source="{Binding FileIcon}"/>
                        <TextBlock Margin="4,0,0,0" Text="{Binding Name}"/>
                    </StackPanel>
                </DataTemplate>

                <!-- Define the hierarchical data template for a folder. -->

                <HierarchicalDataTemplate DataType="{x:Type viewmodels:FolderViewModel}" ItemsSource="{Binding Children}">
                    
                    <!-- Define the stack panel containing an image and text block for the folder. -->

                    <StackPanel Orientation="Horizontal" Margin="2">
                        <Image x:Name="folderImg" Source="../Resources/folder_closed.png"/>
                        <TextBlock Margin="4,0,0,0" Text="{Binding Name}"/>
                    </StackPanel>

                    <!-- Define a trigger to change the folder image to an open folder when the tree
                         view item is expanded. -->

                    <HierarchicalDataTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TreeViewItem}, Path=IsExpanded}" Value="True">
                            <Setter TargetName="folderImg" Property="Source" Value="../Resources/folder_open.png"/>
                        </DataTrigger>
                    </HierarchicalDataTemplate.Triggers>
                </HierarchicalDataTemplate>
            </TreeView.Resources>
            
            <!-- Lastly we create a style on the "TreeViewItem" binding the "IsExpanded" property
                 to the "IsOpen" property on our view model. -->

            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding IsOpen}"/>
                </Style>
            </TreeView.ItemContainerStyle>
        </TreeView>
    </DockPanel>
</UserControl>

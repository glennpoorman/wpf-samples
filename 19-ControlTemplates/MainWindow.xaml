<Window x:Class="ControlTemplates.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ControlTemplates"
        Title="ControlTemplates" Width="660" Height="200">

    <!-- Add a resource section to the window. -->

    <Window.Resources>

        <!-- Add a style that will be applied to any image displayed in this window forcing the
             image not to stretch but to always display in its original size. -->

        <Style TargetType="{x:Type Image}">
            <Setter Property="Stretch" Value="None"/>
        </Style>

        <!-- Every control contains a control template that defines how the control is displayed.
             With any control, this template can be overridden allowing the developer to control
             that display. Like most other properties in XAML, this can be done right in the button
             placement:
        
                <Button Content="Click Me!">
                    <Button.Template>
                        <ControlTemplate>
                             :
                        </ControlTemplate>
                    </Button.Template>
                </Button>
        
             It's more than likely that if you go to the trouble to develop a cool display of your
             own though, you probably want to use it more than once. So like any other property, we
             can go ahead and define the new control template in a style.
        
             Now if you're pretty confident that you know all there is to know about editing control
             templates, you can go ahead and start creating one from scratch. It's a lot easier to
             start with the existing template and then make your own modifications though.
        
             So for this example I dropped a regular old button into my XAML window. I then right
             clicked the button in the display, selected "Edit Style" and then "Edit A Copy...". The
             XAML editor then inserted a full copy of the current button style and control template
             into my file and modified the button I selected to use the new style.
        
             That's when the editing begins.
        
             First, the XAML editor inserted definitions for a whole bunch of color resources and
             for a "FocusVisualStyle". Once I was finished making all of my other edits, I didn't
             need any of these so I removed them all.

             Next is the button style. By default, the editor gives the style a name like
             "ButtonStyle1" and then adds a property to the selected button that references that
             style by name:
        
                 <Button Style="{StaticResource ButtonStyle1}" .../>
        
             In our case though, we want the style to apply to every button in the window so we've
             removed the style name and just left the target type. -->

        <Style TargetType="{x:Type Button}">
            
            <!-- Next I added a few properties of my own to apply to all of the buttons in this
                 window just to make the button specs later on read a little easier on the eye. I
                 added the "Height", "Width", and "FontSize" properties while the two alignment
                 properties were already added in the default style. -->

            <Setter Property="Height" Value="80"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            
            <!-- Here's where it gets interesting. We use a "Setter" just like we would for any
                 other property to set the "Template" property. We use the longhand to start the
                 "Value" property on the setter and then start the "ControlTemplate" definition.
                 Note the use of the "TargetType" here just like we do for styles. -->

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <!-- Originally the button display is done using a "Border" element. That
                             is the element that displays the gray background, the thin border,
                             and also provides visual feedback when the button is pushed. For our
                             sample, we wanted to get rid of the classic button look and simply
                             display the button content on its own providing additional visual
                             feedback when the mouse interacts with the button. So where we had
                             the following before:
                        
                                 <Border ...>
                                     <ContentPresenter .../>
                                 </Border>
                        
                             We now just have the content presenter and nothing else.
                        
                             The "ContentPresenter" is simply an item that displays the content of
                             a "ContentControl" item (which is a control like a button or checbox
                             that displays just a single piece of content). So by making the content
                             presenter the only item in our template, we are telling WPF to simply
                             display our content and nothing else.
                        
                             Note that we've given the content presenter a name. We use this name
                             reference this item in the triggers section coming up next.

                             Also note the use of "TemplateBinding" in the properties for the content
                             presenter. This is a special type of binding that binds the values of
                             content presenter properties to the properties set on the button when
                             it is placed. For example, note the binding on the "Margin" property of
                             the content presenter. By using the template binding, the value of that
                             property will be the same as the the value of the "Padding" property on
                             the button itself. -->

                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        
                        <!-- We could end the control template here and we would get the initial
                             display that we want. We want to provide additional visual feedback
                             based on mouse interaction though. In order to do that, we will add
                             a series of triggers to the control template. Using triggers allows
                             us to specify additional property changes when certain conditions
                             occur. -->

                        <ControlTemplate.Triggers>
                            
                            <!-- The first trigger occurs when the mouse hovers over the button.
                                 We use a "Setter" just like we did in the styles sample to specify
                                 what we want to happen when this condition occurs. Here we use the
                                 "TargetName" property to specifically change a property on the
                                 content presenter.
                            
                                  The setter changes the "Effect" property. For the value of the
                                  effect, we create a "DropShadowEffect" item which, as we've
                                  defined it, will show a fuzzy gray glow behind the content when
                                  the mouse hovers over it. -->

                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="contentPresenter" Property="Effect">
                                    <Setter.Value>
                                        <DropShadowEffect Color="Gray" BlurRadius="8" ShadowDepth="0" Opacity="10"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            
                            <!-- Here we say that when the mouse is pressed, we will make the
                                 content more opaque giving it a see through look. -->

                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.5"/>
                            </Trigger>
                            
                            <!-- Lastly we say that if the button is disabled, we will make the
                                 content even more opaque. -->

                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.3"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <!-- Now lets go ahead and create a stack panel that will contain two rows of buttons. -->

    <StackPanel Margin="8">

        <!-- The first row of buttons (a horizontally oriented stack panel) will contain several
             buttons that use images as their content. -->

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            
            <!-- So here we create seven buttons all using different images as content. Note that
                 the style defines the width and height. Also note that with our new control
                 template, the image is the only thing visible. Go ahead and run the app and note
                 the visual feedback when you hover over or click a button. -->

            <Button Click="ButtonClick">
                <Image Source="Resources/add-icon.png"/>
            </Button>
            <Button Click="ButtonClick">
                <Image Source="Resources/subtract-icon.png"/>
            </Button>
            <Button Click="ButtonClick">
                <Image Source="Resources/previous-icon.png"/>
            </Button>
            <Button Click="ButtonClick">
                <Image Source="Resources/next-icon.png"/>
            </Button>
            <Button Click="ButtonClick">
                <Image Source="Resources/upload-icon.png"/>
            </Button>
            <Button Click="ButtonClick">
                <Image Source="Resources/download-icon.png"/>
            </Button>
            <Button Click="CloseButtonClick">
                <Image Source="Resources/turn-off-icon.png"/>
            </Button>
        </StackPanel>

        <!-- Create another horizontally aligned stack panel that will contain our second row of
             buttons. -->

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            
            <!-- Create two buttons that use simple text as content. Just like the image buttons,
                 the only display is the text itself. Again, run the app and notice the visual
                 feedback that occurs when the mouse interacts with the button. -->

            <Button Content="Push Me!" Click="ButtonClick"/>
            <Button Content="Help!" Click="ButtonClick"/>
            
            <!-- Lastly, create a more complex button using a stack panel and then placing both an
                 image and a text string within that stack panel. Again, run the app and note the
                 visual feedback that occurs when the mouse interacts with the button. -->

            <Button Click="CloseButtonClick" Width="120">
                <Button.Content>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="Resources/small-turn-off-icon.png"/>
                        <TextBlock Text="Close Me!" Margin="6,0,0,0"/>
                    </StackPanel>
                </Button.Content>
            </Button>
        </StackPanel>
    </StackPanel>
</Window>

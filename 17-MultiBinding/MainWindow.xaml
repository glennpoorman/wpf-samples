<!-- Note the addition of the "Background" and "Foreground" properties on the window. These change
     the default colors setting our window background to black and the text/foreground to white. -->

<Window x:Class="MultiBinding.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MultiBinding"
        Title="MultiBinding" Height="100" Width="220" ResizeMode="NoResize"
        Background="Black" Foreground="White">

    <!-- Create a static instance of the "Clock" class and set it as the data context on the
         window. -->

    <Window.DataContext>
        <local:Clock/>
    </Window.DataContext>

    <!-- Place a single text block to hold the time. Note that since this is the only item in the
         window, we don't need any containers. The content of this text block is a bit more
         complicated than that of our previous samples though. -->

    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center"
               FontSize="24" FontWeight="Bold">

        <!-- Here we use the long hand syntax to set the text property of the text block. -->

        <TextBlock.Text>

            <!-- We've already seen the use of the "Binding" object in previous samples. There are
                 several different types of binding objects though and here we introduce the
                 multi-binding. A multi-binding object describes a collection of bindings designed
                 to bind more than one source to a single target. In this case, the target is the
                 text of our text block while the sources are the various properties of the clock
                 object.

                 The "StringFormat" of the multi-binding looks very much like standard C# string
                 formatting. Breaking it down:

                 * First there are the "{}" characters that escape the rest of the string.

                 * Next, for each of the four items we use the standard {n} notation where n is
                   the item number (zero-based).

                 * For the first three items, we also add ":D2" which denotes that these are to be
                   displayed as two digit integers. -->

            <MultiBinding StringFormat="{}{0:D2}:{1:D2}:{2:D2} {3}">

                <!-- Now set the collection of bindings. Each binding binds to a different clock
                     property and the final string is assemble using the string format specified
                     in the multi-binding. -->

                <Binding Path="Hours"/>
                <Binding Path="Minutes"/>
                <Binding Path="Seconds"/>
                <Binding Path="AmPm"/>
            </MultiBinding>
        </TextBlock.Text>
    </TextBlock>
</Window>
